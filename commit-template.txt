# Capitalized, short (50 chars or less) summary

* Description:
# What did you change? Why did you change it? How does it better the
# the code base? Was anything deleted or updated that needs spreads
# across other parts of the application? If I've never seen our code
# base, write this description so I will know exactly what happen in
# this commit.

# More detailed explanatory text, if necessary.  Wrap it to about 72
# characters or so.  In some contexts, the first line is treated as the
# subject of an email and the rest of the text as the body.  The blank
# line separating the summary from the body is critical (unless you omit
# the body entirely); tools like rebase can get confused if you run the
# two together.

# Write your commit message in the present tense: "Fix bug" and not "Fixed
# bug."  This convention matches up with commit messages generated by
# commands like git merge and git revert.

# Further paragraphs come after blank lines.

* Notes:
# - Bullet points are okay, too

# - Use an asterisk for bullet points, preceded by a single space,
#   with a few spaces before any extra lines.

# - Use a hanging indent

* Actions:
# - Bulleted list of actions needed to be taken by other engineers.
